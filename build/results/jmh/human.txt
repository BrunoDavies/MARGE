# JMH version: 1.25
# VM version: JDK 15.0.6, OpenJDK 64-Bit Server VM, 15.0.6+5-MTS
# VM invoker: /home/bruno/.jdks/azul-15.0.6/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/home/bruno/IdeaProjects/rggTool/build/tmp/jmh -Duser.country=GB -Duser.language=en -Duser.variant
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: me.champeau.jmh.SampleBenchmark.produceCorrectTestMatrix

# Run progress: 0.00% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 255862.670 ops/s
# Warmup Iteration   2: 265242.274 ops/s
Iteration   1: 242799.957 ops/s
Iteration   2: 264091.858 ops/s
Iteration   3: 259917.315 ops/s
Iteration   4: 264191.231 ops/s
Iteration   5: 264904.901 ops/s


Result "me.champeau.jmh.SampleBenchmark.produceCorrectTestMatrix":
  259181.052 ±(99.9%) 36063.840 ops/s [Average]
  (min, avg, max) = (242799.957, 259181.052, 264904.901), stdev = 9365.665
  CI (99.9%): [223117.213, 295244.892] (assumes normal distribution)


# Run complete. Total time: 00:01:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt       Score       Error  Units
SampleBenchmark.produceCorrectTestMatrix  thrpt    5  259181.052 ± 36063.840  ops/s

Benchmark result is saved to /home/bruno/IdeaProjects/rggTool/build/results/jmh/results.txt
