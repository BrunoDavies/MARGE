# JMH version: 1.25
# VM version: JDK 15.0.6, OpenJDK 64-Bit Server VM, 15.0.6+5-MTS
# VM invoker: /home/bruno/.jdks/azul-15.0.6/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/home/bruno/IdeaProjects/rggTool/build/tmp/jmh -Duser.country=GB -Duser.language=en -Duser.variant
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: me.champeau.jmh.SampleBenchmark.produceCorrectTestMatrix

# Run progress: 0.00% complete, ETA 00:02:20
# Fork: 1 of 1
# Warmup Iteration   1: 20117.985 ops/s
# Warmup Iteration   2: 23195.405 ops/s
Iteration   1: 23381.727 ops/s
Iteration   2: 23607.302 ops/s
Iteration   3: 23642.716 ops/s
Iteration   4: 23476.223 ops/s
Iteration   5: 23439.200 ops/s


Result "me.champeau.jmh.SampleBenchmark.produceCorrectTestMatrix":
  23509.433 ±(99.9%) 429.166 ops/s [Average]
  (min, avg, max) = (23381.727, 23509.433, 23642.716), stdev = 111.453
  CI (99.9%): [23080.268, 23938.599] (assumes normal distribution)


# JMH version: 1.25
# VM version: JDK 15.0.6, OpenJDK 64-Bit Server VM, 15.0.6+5-MTS
# VM invoker: /home/bruno/.jdks/azul-15.0.6/bin/java
# VM options: -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/home/bruno/IdeaProjects/rggTool/build/tmp/jmh -Duser.country=GB -Duser.language=en -Duser.variant
# Warmup: 2 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: me.champeau.jmh.SampleBenchmark.produceCorrectTestMatrix

# Run progress: 50.00% complete, ETA 00:01:10
# Fork: 1 of 1
# Warmup Iteration   1: ≈ 10⁻⁴ s/op
# Warmup Iteration   2: ≈ 10⁻⁴ s/op
Iteration   1: ≈ 10⁻⁴ s/op
Iteration   2: ≈ 10⁻⁴ s/op
Iteration   3: ≈ 10⁻⁴ s/op
Iteration   4: ≈ 10⁻⁴ s/op
Iteration   5: ≈ 10⁻⁴ s/op


Result "me.champeau.jmh.SampleBenchmark.produceCorrectTestMatrix":
  ≈ 10⁻⁴ s/op


# Run complete. Total time: 00:02:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt      Score     Error  Units
SampleBenchmark.produceCorrectTestMatrix  thrpt    5  23509.433 ± 429.166  ops/s
SampleBenchmark.produceCorrectTestMatrix   avgt    5     ≈ 10⁻⁴             s/op

Benchmark result is saved to /home/bruno/IdeaProjects/rggTool/build/results/jmh/results.txt
